initSidebarItems({"macro":[["component_style",""],["forward_event","Specifies a handler that redirects events from one widget to another. Optionally you can specify a closure that modifies the event."],["multi_event","Simplifies setting up an EventHandler that can receive multiple events. Generates an event enum and matches each event to a method on the handler. Also creates an associated method on the handler, `add_adapters` that should be called when the handler is added to a widget, to add the \"adapter\" handlers that redirect each event to the main event handler."],["named_id","Create a new simple id type, wrapper around a usize that can be created via `IdGen`"],["style",""]],"mod":[["app","Contains the `App` type, used to initialize and run a Limn application."],["color","Color helper types and constants"],["draw","Contains common `Draw` state, basic drawing primitives"],["event","Contains types relevant to event handling and the event queue."],["geometry","Geometric type definitions, such as `Point`, `Rect` and `Size`"],["input","Contains handlers for input events from `winit` (keyboard, mouse etc.), generally responsible for forwarding input to other handlers."],["layout","Module for layout / resizing handlers and layout solving"],["prelude","Re-exports of common crate-internal functions / structs"],["render","Helper functions and useful types for interacting with WebRender"],["resources","Font, image and texture resources"],["style","Contains types relevant to declaring styleable components, and the theming engine which allows styleable components to inherit values from an application theme."],["ui","Contains `Ui`, which contains application global state and is accessible to every event handler."],["widget","Module for `Widget` and callback handlers Types used to create and manage widgets."],["widgets","Includes standard bundled widgets."],["window","Wrapper around `glutin::Window`"]]});